{
  "MorphTarget.java": {
    "desc": "AccessorDataベースの効率的なモーフターゲットデータ管理クラス",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "AccessorDataによる差分データの直接保持",
      "float[]配列の代わりにAccessorDataで軽量化",
      "位置・法線・タンジェント差分対応",
      "効率的なメモリ使用量計算",
      "読み取り専用データアクセス",
      "個別頂点の差分取得機能"
    ],
    "dependencies": ["AccessorData", "AccessorDataType"],
    "note": "ProcessedVertex削除に伴いAccessorDataベース設計に変更"
  },
  "DrawingMode.java": {
    "desc": "glTFの描画モード定義とMinecraft VertexFormat.DrawModeとの変換",
    "importance": "medium",
    "last_accessed": "2025-06-03",
    "key_features": [
      "OpenGLプリミティブタイプからMinecraft描画モードへの変換",
      "POINTS/LINES/TRIANGLES等の描画モード対応",
      "描画可能性チェック機能"
    ],
    "dependencies": ["GltfRenderer"],
    "note": "POINTSとLINE_LOOPはMinecraftで直接描画できないためnull設定"
  },
  "GLTFModelManager.java": {
    "desc": "glTFモデルのリソース管理とロード処理を行うシングルトンマネージャー",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "ResourceReloaderによるリソースパックからの.glbファイル読み込み",
      "非同期でのモデル変換とキャッシング",
      "models/gltf/配下の.glbファイル自動検出",
      "GltfModelConverterとの連携"
    ],
    "dependencies": ["GltfModelConverter", "ProcessedGltfModel", "ActionArmsClient"],
    "note": "INSTANCE経由でアクセス、CLIENT_RESOURCESでリロード登録が必要"
  },
  "GltfModelConverter.java": {
    "desc": "jglTF形式からMinecraft描画用形式への変換処理",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "GltfModelからProcessedGltfModelへの変換",
      "アニメーション・スキン・メッシュの個別抽出",
      "複数シーン対応とエラーハンドリング"
    ],
    "dependencies": ["GltfVertexExtractor", "GltfSkinExtractor", "GltfAnimationExtractor", "ProcessedGltfModel"],
    "note": "変換処理でのエラーは個別にログ出力、処理続行"
  },
  "GltfRenderer.java": {
    "desc": "副作用ゼロのProcessedGltfModel描画処理（RenderingContext完全対応）",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "副作用ゼロのrender()メソッド（純粋関数）",
      "RenderingContextから全状態を取得",
      "イミュータブルな描画処理",
      "マテリアル別レンダーレイヤー管理",
      "TRIANGLES/TRIANGLE_STRIP/POINTS/LINES描画対応",
      "スレッドセーフなレンダリング",
      "テスタビリティ向上（純粋関数）"
    ],
    "dependencies": ["ProcessedGltfModel", "RenderingContext", "VertexProcessor", "ComputedVertexData"],
    "note": "副作用ゼロ設計への大幅変更予定。状態管理をRenderingContextに完全移行"
  },
  "AccessorDataType.java": {
    "desc": "glTF属性のデータ型定義とコンポーネント数・Java型の管理",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "POSITION/NORMAL/UV等の属性型定義",
      "属性名からデータ型の自動推定",
      "コンポーネント数とJava型の対応",
      "バイト単位でのサイズ計算",
      "モーフターゲット属性対応"
    ],
    "dependencies": ["AccessorData", "AccessorDataCache"],
    "note": "AccessorDataシステムの基盤となる型定義"
  },
  "AccessorSignature.java": {
    "desc": "アクセサの内容を一意に識別するシグネチャ、キャッシュキーとして使用",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "BufferViewハッシュによる一意識別",
      "オフセット・型・正規化フラグの管理",
      "効率的なhashCode計算",
      "デバッグ用toString実装"
    ],
    "dependencies": ["AccessorDataCache"],
    "note": "同一データアクセサの重複防止に使用"
  },
  "AccessorData.java": {
    "desc": "アクセサから抽出されたプリミティブ配列データの効率的保持クラス",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "float[]・int[]によるプリミティブ配列保持",
      "元AccessorModel非保持による軽量化",
      "豊富なバリデーション機能",
      "防御的コピーによる型安全性",
      "メモリ使用量計算とデバッグ情報",
      "要素・コンポーネント単位でのデータアクセス"
    ],
    "dependencies": ["AccessorDataType", "AccessorSignature"],
    "note": "AccessorDataシステムの核となるデータ保持クラス"
  },
  "AccessorDataCache.java": {
    "desc": "AccessorDataのスレッドセーフなキャッシュ管理、重複排除とメモリ効率化",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "ConcurrentHashMapによるスレッドセーフ実装",
      "AccessorSignatureベースのキャッシング",
      "ヒット率・メモリ使用量の統計情報",
      "float/int配列の自動抽出",
      "キャッシュ管理（クリア・削除・統計）",
      "デバッグ用コンテンツ表示機能"
    ],
    "dependencies": ["AccessorData", "AccessorSignature", "AccessorDataType"],
    "note": "メモリ使用量50-80%削減を実現。副作用ゼロ設計にも対応済み"
  },
  "ProcessedMesh.java": {
    "desc": "AccessorDataベースの効率的なメッシュデータ管理クラス（大幅設計変更）",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "Map<String, AccessorData>で属性データを直接保持",
      "ProcessedVertex[]を廃止してメモリ効率大幅改善",
      "属性別の効率的アクセス機能",
      "キャッシュシステム削除でシンプル化",
      "読み取り専用生配列アクセス",
      "個別頂点データ取得機能",
      "統計情報とデバッグ機能充実",
      "メッシュデータの整合性チェック"
    ],
    "dependencies": ["AccessorData", "MorphTarget", "ProcessedSkin", "DrawingMode"],
    "note": "ProcessedVertex依存削除、AccessorDataシステムとの完全統合"
  },
  "VertexProcessor.java": {
    "desc": "AccessorDataベースの効率的な頂点処理クラス（新設計対応）",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "ProcessedMeshからAccessorDataを直接取得",
      "不要な配列コピーの削減",
      "効率的なモーフターゲット適用",
      "AccessorDataベースのスキニング処理",
      "部分更新用頂点単位スキニング",
      "法線の自動正規化",
      "範囲チェックとエラーハンドリング強化"
    ],
    "dependencies": ["ProcessedMesh", "ComputedVertexData", "RenderingContext", "MorphTarget"],
    "note": "ProcessedVertex削除に伴い新ProcessedMeshインターフェースに対応"
  },
  "ComputedVertexData.java": {
    "desc": "計算済み頂点データの効率的管理クラス（機能強化）",
    "importance": "medium",
    "last_accessed": "2025-06-03",
    "key_features": [
      "位置・法線・UV座標の統合管理",
      "防御的コピーと読み取り専用アクセス",
      "個別頂点データ取得機能",
      "境界ボックス計算機能",
      "メモリ使用量計算とデバッグ情報",
      "データ整合性バリデーション",
      "BoundingBox内部クラスで幾何情報管理"
    ],
    "dependencies": ["VertexProcessor"],
    "note": "UV座標対応、境界ボックス計算等機能強化"
  },
  "ProcessedVertex.java": {
    "desc": "【削除済み】個別頂点データ保持クラス - AccessorDataシステム導入により不要になったため削除",
    "importance": "deleted",
    "last_accessed": "2025-06-03",
    "key_features": [
      "【削除理由】大量のオブジェクト作成によるメモリ無駄遣い",
      "【削除理由】属性別アクセスの非効率性",
      "【削除理由】AccessorDataの恩恵を受けられない設計",
      "【代替手段】ProcessedMeshで属性別AccessorDataを直接管理",
      "【代替手段】個別頂点データはProcessedMesh.getVertexXxx()で取得"
    ],
    "dependencies": [],
    "note": "ProcessedVertex.java.backupとしてバックアップ保存済み、新設計では不要"
  },
  "GltfVertexExtractor.java": {
    "desc": "AccessorDataCacheを使用したメッシュ頂点データの重複排除抽出処理",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "AccessorDataによるアクセサレベルデータ管理",
      "重複頂点問題の解決（同一アクセサデータ共有）",
      "必須属性の自動補完（NORMAL・UVデフォルト生成）",
      "モーフターゲットのAccessorData化",
      "新ProcessedMeshコンストラクタ対応",
      "エラーハンドリング強化",
      "キャッシュ統計とデバッグ機能"
    ],
    "dependencies": ["AccessorDataCache", "AccessorData", "ProcessedMesh", "MorphTarget"],
    "note": "重複頂点問題解決済み、新ProcessedMesh設計に対応済み"
  },
  "ProcessedGltfModel.java": {
    "desc": "変換済みglTFモデルデータの統合管理クラス",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "メッシュ・スキン・アニメーションリストの管理",
      "名前によるアニメーション検索",
      "モーフターゲット最大数の計算",
      "統計情報の提供（頂点数・三角形数・ボーン数）"
    ],
    "dependencies": ["ProcessedMesh", "ProcessedSkin", "ProcessedAnimation"],
    "note": "元のGltfModelも保持、必要に応じて生データアクセス可能"
  },
  "GltfAnimationController.java": {
    "desc": "副作用ゼロのglTFアニメーション計算処理（純粋関数設計）",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "computeAnimation()による純粋関数計算",
      "AnimationInputからAnimationResultへの変換",
      "ボーン行列計算（副作用なし）",
      "モーフウェイト計算（副作用なし）",
      "時間正規化とループ処理",
      "イミュータブルな結果オブジェクト",
      "状態保持なしの設計"
    ],
    "dependencies": ["ProcessedGltfModel", "ProcessedAnimation", "ProcessedSkin", "ProcessedBone"],
    "note": "副作用ゼロ設計への完全変更完了。状態管理を完全外部化"
  },
  "RenderingContext.java": {
    "desc": "イミュータブルなレンダリング状態管理クラス（Builder パターン）",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "完全イミュータブル設計（副作用ゼロ）",
      "Builder パターンによる柔軟な構築",
      "アニメーション・ボーン・モーフィング状態統合管理",
      "レンダリング設定（ライティング・テクスチャ・アルファ）",
      "カメラ・ビューポート情報",
      "状態比較メソッド（更新判定用）",
      "カスタムプロパティ対応"
    ],
    "dependencies": ["GltfRenderer", "GltfAnimationController", "VertexProcessor"],
    "note": "副作用ゼロ設計の中核。全レンダリング状態をここに集約完了"
  },
  "AnimationStateManager.java": {
    "desc": "アニメーション状態を管理するクラス（副作用を集約）",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "アニメーションの開始・停止・切り替え",
      "再生速度とループ設定の管理",
      "状態更新処理の集約（副作用あり）",
      "RenderingContext構築の支援",
      "アニメーション完了コールバック",
      "進行度と残り時間の取得"
    ],
    "dependencies": ["GltfAnimationController", "RenderingContext"],
    "note": "副作用を集約して管理する設計。GltfAnimationControllerと連携"
  },
  "GunItemRenderer.java": {
    "desc": "銃アイテムの統合レンダリングクラス（副作用ゼロコンポーネント統合）",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "副作用ゼロコンポーネントの統合",
      "アニメーショントリガー処理",
      "状態更新から純粋描画までのフロー",
      "銃特有のアニメーション判定",
      "使いやすい操作インターフェース",
      "デバッグ・情報取得機能"
    ],
    "dependencies": ["GltfRenderer", "GltfAnimationController", "AnimationStateManager", "GunRenderState", "GunItemState"],
    "note": "実際のMixinItemRendererから呼び出されるメインクラス"
  },
  "GunRenderState.java": {
    "desc": "銃のレンダリング状態管理（マズルフラッシュ・透明度等）",
    "importance": "medium",
    "last_accessed": "2025-06-03",
    "key_features": [
      "マズルフラッシュの自動管理",
      "透明度エフェクト（フェード処理）",
      "カスタムモーフウェイト管理",
      "リロード進行度に応じたエフェクト",
      "弾薬残量インジケーター",
      "RenderingContextへの状態適用"
    ],
    "dependencies": ["GunItemState", "RenderingContext"],
    "note": "銃特有の視覚効果を管理。GunItemStateから状態を取得して更新"
  },
  "GunItemState.java": {
    "desc": "銃アイテムの状態を表すインターフェース",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "リロード・発射・エイム状態の取得",
      "弾薬数とリロード進行度",
      "銃の種類と設定情報",
      "アニメーション関連の設定",
      "エフェクト関連の設定",
      "デフォルト実装付き"
    ],
    "dependencies": [],
    "note": "実際の銃アイテムクラスがこのインターフェースを実装する"
  },
  "TestGunItemState.java": {
    "desc": "テスト用のGunItemState実装（開発・デバッグ用）",
    "importance": "low",
    "last_accessed": "2025-06-03",
    "key_features": [
      "全ての状態を手動設定可能",
      "発射とリロードのシミュレーション",
      "ランダム状態変化機能",
      "リロード進行シミュレーション",
      "状態リセット機能",
      "デバッグ情報出力"
    ],
    "dependencies": ["GunItemState"],
    "note": "開発時のテストやデモ用。実際のアイテムでは使用しない"
  },
  "GLTFModelItem.java": {
    "desc": "glTFモデルを使用するアイテム用のマーカーインターフェース",
    "importance": "medium",
    "last_accessed": "2025-06-03",
    "key_features": [
      "MixinItemRendererでの描画判定に使用",
      "将来的にモデルファイル指定機能拡張予定"
    ],
    "dependencies": ["MixinItemRenderer", "GunItem"],
    "note": "現在は空インターフェース、将来的に機能拡張予定"
  },
  "GltfAnimationController.java": {
    "desc": "副作用ゼロのglTFアニメーション計算処理（純粋関数設計）",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "computeAnimation()による純粋関数計算",
      "AnimationInputからAnimationResultへの変換",
      "ボーン行列計算（副作用なし）",
      "モーフウェイト計算（副作用なし）",
      "時間正規化とループ処理",
      "イミュータブルな結果オブジェクト",
      "状態保持なしの設計"
    ],
    "dependencies": ["ProcessedGltfModel", "ProcessedAnimation", "ProcessedSkin", "ProcessedBone"],
    "note": "副作用ゼロ設計への大幅変更予定。状態管理を完全外部化"
  },
  "RenderingContext.java": {
    "desc": "イミュータブルなレンダリング状態管理クラス（Builder パターン）",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "完全イミュータブル設計（副作用ゼロ）",
      "Builder パターンによる柔軟な構築",
      "アニメーション・ボーン・モーフィング状態統合管理",
      "レンダリング設定（ライティング・テクスチャ・アルファ）",
      "カメラ・ビューポート情報",
      "状態比較メソッド（更新判定用）",
      "カスタムプロパティ対応"
    ],
    "dependencies": ["GltfRenderer", "GltfAnimationController", "VertexProcessor"],
    "note": "副作用ゼロ設計の中核。全レンダリング状態をここに集約予定"
  },
  "MixinItemRenderer.java": {
    "desc": "Minecraftのアイテム描画をフックしてglTF描画に切り替えるMixin（副作用ゼロ対応）",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "エンティティ保持アイテムとスタンドアロンアイテムの描画対応",
      "GLTFModelItemインターフェース判定",
      "元描画処理のキャンセル",
      "GunItemRendererとの連携（副作用ゼロ）",
      "TestGunItemStateでのテスト対応"
    ],
    "dependencies": ["GLTFModelItem", "GLTFModelManager", "GunItemRenderer", "TestGunItemState"],
    "note": "副作用ゼロシステム実装完了。新GunItemRendererを使用した統合レンダリング、場所はmixinディレクトリ"
  }
}