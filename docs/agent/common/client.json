{
  "ActionArmsClient.java": {
    "desc": "クライアント側の初期化処理、glTFモデルマネージャー・エンティティレンダラー登録",
    "importance": "high",
    "last_accessed": "2025-06-13",
    "key_features": ["クライアント初期化のエントリーポイント", "AAKeys初期化", "GLTFModelManagerリソースリローダー登録", "BulletEntityRendererエンティティレンダラー登録", "ClientHudManagerティック登録", "AAHudRendererレンダー登録"],
    "dependencies": ["AAKeys", "GLTFModelManager", "BulletEntityRenderer", "Registration", "ClientHudManager", "AAHudRenderer"],
    "note": "preInit/initの分離により初期化順序を適切に制御。弾丸エンティティの描画システム対応。HUD描画システムの統合管理を担当"
  },
  "key/AAKeys.java": {
    "desc": "銃操作用のキーバインド定義・登録処理とKeyInputManager連携",
    "importance": "high",
    "last_accessed": "2025-06-11",
    "key_features": [
      "FIRE/AIM/RELOAD/COCKキーの定義",
      "KeyInputManager.Keyとの対応付け",
      "キー競合設定",
      "ClientKeyInputManagerとの連携"
    ],
    "dependencies": ["KeyRegisterCallback", "KeyInputManager"],
    "note": "従来の右クリック操作から専用キーバインドシステムに移行完了"
  },
  "key/ClientKeyInputManager.java": {
    "desc": "クライアント側のキー入力管理とサーバー同期処理",
    "importance": "high",
    "last_accessed": "2025-06-11",
    "key_features": [
      "シングルトンパターンによる一元管理",
      "KeyInputManagerでのキー状態追跡",
      "キー変化時のサーバー送信",
      "preTick/postTickでの状態管理"
    ],
    "dependencies": ["AAKeys", "KeyInputManager", "KeyInputPacket"],
    "note": "クライアント・サーバー間のキー入力同期システムの中核"
  },
  "key/KeyRegisterCallback.java": {
    "desc": "プラットフォーム依存のキー登録処理インターフェース",
    "importance": "medium", 
    "last_accessed": "2025-05-29",
    "key_features": [
      "@ExpectPlatform使用",
      "ゲーム内キー競合設定",
      "マウスキー競合設定"
    ],
    "note": "FabricとForgeで異なる実装が必要"
  },
  "render/gltf/MixinItemRenderer.java": {
    "desc": "Minecraftのアイテム描画をフックしてglTF描画に切り替えるMixin",
    "importance": "high",
    "last_accessed": "2025-06-03",
    "key_features": [
      "エンティティ保持アイテムとスタンドアロンアイテムの描画対応",
      "GLTFModelItemインターフェース判定",
      "元描画処理のキャンセル",
      "GltfRendererとの連携"
    ],
    "dependencies": ["GLTFModelItem", "GLTFModelManager", "GltfRenderer"],
    "note": "現在全モデルを描画、将来的にアイテム別モデル選択機能必要"
  },
  "render/gltf/ItemAnimationManager.java": {
    "desc": "アイテム個体別のアニメーション状態を管理するシングルトンマネージャー。UUIDベースでアニメーション状態を時間管理",
    "importance": "high",
    "last_accessed": "2025-06-08",
    "key_features": [
      "シングルトンパターンによる一元管理",
      "UUIDベースのアイテム個体識別",
      "アニメーション状態の時間管理",
      "10秒での自動クリーンアップ",
      "UniqueComponentとの連携",
      "マルチプレイヤー対応"
    ],
    "dependencies": ["UniqueComponent.java"],
    "note": "レバーアクション等のアニメーション同期システムの中核"
  },
  "render/gltf/MixinHeldItemRenderer.java": {
    "desc": "手持ちアイテムの描画位置をカスタマイズするMixin。glTFモデルアイテムの特別な描画位置制御を実装",
    "importance": "medium",
    "last_accessed": "2025-06-08",
    "key_features": [
      "applyEquipOffset()のカスタマイズ",
      "applySwingOffset()の無効化",
      "GLTFModelItemの特別な位置制御",
      "左右の腕に応じた位置調整"
    ],
    "dependencies": ["GlftModelItem.java"],
    "note": "銃の描画位置を適切に制御するために重要"
  },
  "render/entity/BulletEntityRenderer.java": {
    "desc": "弾丸エンティティの描画レンダラー。Minecraftの標準エンティティレンダラーシステムに対応",
    "importance": "medium",
    "last_accessed": "2025-06-10",
    "key_features": [
      "EntityRenderer継承",
      "EntityRendererFactory.Context対応",
      "暫定的に矢のテクスチャを使用",
      "将来的なglTFモデル描画対応予定"
    ],
    "dependencies": ["BulletEntity.java", "ActionArmsClient.java"],
    "note": "現在は矢のテクスチャを使用、今後glTFモデルでの描画を検討"
  },
  "render/hud/AAHudRenderer.java": {
    "desc": "銃の弾薬状況を視覚的に表示するHUDレンダラー。薬室とマガジンの装填状況をリアルタイム描画",
    "importance": "high",
    "last_accessed": "2025-06-13",
    "key_features": [
      "シングルトンパターンによる一元管理",
      "薬室とマガジンの弾薬状況を視覚化",
      "縦並び（右下固定）表示システム",
      "横並び（上部中央）表示システム（将来の設定切り替え用）",
      "弾薬テクスチャと空テクスチャでの装填状況表示",
      "LeverActionHudStateとの連携",
      "UniqueComponentによる個別アイテム識別",
      "HudStateクラスによる状態管理"
    ],
    "dependencies": ["LeverActionHudState.java", "ClientHudManager.java", "UniqueComponent.java"],
    "note": "約120行の実装。マルチプレイヤー対応のリアルタイム弾薬表示システム。将来的に表示方式の設定切り替え機能予定"
  },
  "render/hud/ClientHudManager.java": {
    "desc": "クライアント側HUD状態管理システム。サーバーからの状態更新を受信・管理",
    "importance": "high",
    "last_accessed": "2025-06-13",
    "key_features": [
      "シングルトンパターンによる一元管理",
      "Map<String, HudState>での状態管理",
      "20tick（1秒）でのタイムアウト処理",
      "updateHud()メソッドでのサーバー同期",
      "preTick()メソッドでの古い状態クリーンアップ",
      "getState()メソッドでの型安全な状態取得",
      "Function<NbtCompound, T>によるファクトリーパターン"
    ],
    "dependencies": ["AAHudRenderer.java", "HudStatePacket.java"],
    "note": "約40行の実装。効率的なHUD状態管理とタイムアウト機能でメモリリークを防止"
  }
}