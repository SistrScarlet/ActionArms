{
  "BulletEntity.java": {
    "desc": "弾丸エンティティクラス。パーティクル、カスタムダメージ、ヒット同期、物理演算を統合した完全実装",
    "importance": "high",
    "last_accessed": "2025-06-15",
    "key_features": [
      "Entity継承とOwnable実装",
      "レイキャスト当たり判定システム",
      "エンティティ/ブロック衝突処理",
      "ヘッドショット判定システム",
      "弾道軌跡パーティクル（CRITパーティクル）",
      "カスタム弾丸ダメージタイプ作成",
      "ヒット・キル判定とHUD同期",
      "BulletHitHudStateでの結果フィードバック",
      "重力と空気抵抗の物理演算",
      "所有者追跡システム（UUID/Entity）",
      "BulletComponentとの連携",
      "40tickでの自動消去タイマー",
      "マルチプレイヤー対応",
      "EnderDragonPart特別対応"
    ],
    "dependencies": ["BulletComponent.java", "GunComponentTypes.java", "Registration.java", "BulletHitHudState.java", "HudStatePacket.java", "DamageSourcesAccessor.java"],
    "note": "約260行に拡張。パーティクル、カスタムダメージ、ヒット同期を統合した本格的な射撃システム。HUDへのリアルタイムフィードバックも実装"
  },
  "util/InventoryAmmoUtil.java": {
    "desc": "インベントリから弾薬を管理するユーティリティクラス。弾薬検索・取得・消費機能を提供",
    "importance": "medium",
    "last_accessed": "2025-06-10",
    "key_features": [
      "popBullets() - 条件に合う弾薬を取得してインベントリから削除",
      "getBullets() - 条件に合う弾薬を検索（削除しない）",
      "hasBullet() - 条件に合う弾薬の存在確認",
      "getBullet() - ItemStackからBulletComponentを抽出",
      "Predicate<BulletComponent>による柔軟な弾薬フィルタリング",
      "BulletItemとの連携によるコンポーネント取得"
    ],
    "dependencies": ["BulletItem.java", "BulletComponent.java", "IItemComponent.java"],
    "note": "64行の簡潔な実装。銃のリロード処理で使用される重要なユーティリティ。実際はentity/utilディレクトリに配置"
  },
  "util/KeyInputManager.java": {
    "desc": "プレイヤーのキー入力状態を管理する汎用システム。現在・過去の状態を保持し、押し・離し判定を提供",
    "importance": "high",
    "last_accessed": "2025-06-14",
    "key_features": [
      "Key列挙型（FIRE/AIM/COCK/RELOAD）",
      "InputLogクラスによる8フレーム状態履歴",
      "isTurnPress/isTurnRelease判定",
      "input()によるキー状態更新",
      "postTick()による状態同期",
      "マルチプレイヤー対応設計"
    ],
    "dependencies": [],
    "note": "純粋な状態管理クラス。クライアント・サーバー両方で使用される汎用システム。IKeyInputManager実装でインターフェース対応。実際はentity/utilディレクトリに配置"
  },
  "util/GunController.java": {
    "desc": "プレイヤーの銃操作を統合制御するシステム。キー入力に応じた銃のトリガー・サイクル・リロード処理と耐久度管理を自動化",
    "importance": "high",
    "last_accessed": "2025-06-15",
    "key_features": [
      "LivingEntity/KeyInputManager/アイテム取得の統合管理",
      "インベントリ全体の銃アイテム自動処理",
      "選択中アイテムでのキー操作処理",
      "非選択アイテムでもtick処理継続",
      "発砲時の耐久度減少処理（非クリエイティブ）",
      "LeverActionGunItemとの完全連携",
      "サーバーサイド専用処理"
    ],
    "dependencies": ["LeverActionGunItem.java", "IKeyInputManager.java", "UniqueComponent.java"],
    "note": "約110行に拡張。従来の右クリック操作をキーバインド操作に完全移行させる中核システム。耐久度管理も統合した総合銃器制御システム"
  },
  "util/HasKeyInputManager.java": {
    "desc": "KeyInputManagerアクセス用インターフェース。Mixinでプレイヤーエンティティに実装される",
    "importance": "medium",
    "last_accessed": "2025-06-11",
    "key_features": [
      "actionArms$getKeyInputManager()メソッド定義",
      "Mixinパターンでの実装"
    ],
    "dependencies": ["IKeyInputManager.java"],
    "note": "Mixin設計の一部。プレイヤーエンティティにキー管理機能を注入。IKeyInputManager型返却に変更。実際はentity/utilディレクトリに配置"
  },
  "util/HasGunController.java": {
    "desc": "GunControllerアクセス用インターフェース。Mixinでプレイヤーエンティティに実装される",
    "importance": "medium",
    "last_accessed": "2025-06-11",
    "key_features": [
      "actionArms$getGunController()メソッド定義",
      "Mixinパターンでの実装"
    ],
    "dependencies": ["GunController.java"],
    "note": "Mixin設計の一部。プレイヤーエンティティに銃制御機能を注入。実際はentity/utilディレクトリに配置"
  },
  "util/AimManager.java": {
    "desc": "エイム状態管理システム。プレイヤーのエイム状態とアイテム切り替え時の自動エイム解除を実装",
    "importance": "high",
    "last_accessed": "2025-06-14",
    "key_features": [
      "IAimManagerインターフェース実装",
      "PlayerEntityをコンストラクタで受け取り",
      "aiming状態のboolean管理",
      "prevAimStackによるアイテム切り替え検出",
      "canAiming()によるエイム可能条件判定",
      "LeverActionGunItemのエイム対象チェック",
      "tick()でのアイテム変更時エイム解除",
      "setAiming()での安全なエイム状態設定"
    ],
    "dependencies": ["IAimManager.java", "LeverActionGunItem.java"],
    "note": "約50行の実装。エイム機能の中核システム。アイテム切り替え時の自動エイム解除でユーザビリティを向上"
  },
  "util/HasAimManager.java": {
    "desc": "AimManagerアクセス用インターフェース。Mixinでプレイヤーエンティティに実装される",
    "importance": "medium",
    "last_accessed": "2025-06-15",
    "key_features": [
      "actionArms$getAimManager()メソッド定義",
      "IAimManager型の返却",
      "get()静的メソッドでOptional型安全アクセス",
      "Mixinパターンでの実装"
    ],
    "dependencies": ["IAimManager.java"],
    "note": "get()静的メソッド追加でより便利に。Mixin設計の一部。プレイヤーエンティティにエイム管理機能を注入。実際はentity/utilディレクトリに配置"
  },
  "util/IAimManager.java": {
    "desc": "エイム管理システムのインターフェース。エイム状態の取得・設定メソッドを定義",
    "importance": "medium",
    "last_accessed": "2025-06-14",
    "key_features": [
      "isAiming()メソッド定義",
      "setAiming(boolean aim)メソッド定義",
      "エイム状態の抽象化",
      "型安全なインターフェース設計"
    ],
    "dependencies": [],
    "note": "約8行のシンプルなインターフェース。エイム機能の型安全性を保証"
  },
  "util/IKeyInputManager.java": {
    "desc": "キー入力管理システムのインターフェース。KeyInputManagerの抽象化とダミー実装対応",
    "importance": "medium",
    "last_accessed": "2025-06-14",
    "key_features": [
      "tick()メソッド定義",
      "input(Key, boolean)メソッド定義",
      "isPress/isPressPrev/isTurnPress/isTurnReleaseメソッド定義",
      "KeyInputManager.Key列挙型対応",
      "ダミー実装での安全性確保",
      "クライアント・サーバー間の抽象化"
    ],
    "dependencies": ["KeyInputManager.java"],
    "note": "約17行のインターフェース。キー入力システムの抽象化で柔軟性を向上。ClientPlayerEntityでの特別処理を可能にする"
  },
  "mixin/MixinPlayerEntity.java": {
    "desc": "PlayerEntityにAimManager機能を注入するMixin。全プレイヤーエンティティにエイム機能を追加",
    "importance": "high",
    "last_accessed": "2025-06-14",
    "key_features": [
      "PlayerEntityをターゲットとしたMixin",
      "HasAimManagerインターフェース実装",
      "@UniqueフィールドでAimManagerインスタンス保持",
      "@Injectでtick()メソッドにフック",
      "AimManager.tick()の自動呼び出し",
      "サーバー・クライアント両対応"
    ],
    "dependencies": ["AimManager.java", "HasAimManager.java", "IAimManager.java"],
    "note": "約27行の実装。全プレイヤーエンティティにエイム機能を注入。actionarms-common.mixins.jsonに登録済み"
  }
}